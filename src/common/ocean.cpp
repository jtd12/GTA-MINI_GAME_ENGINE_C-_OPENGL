#include"ocean.hpp"

ocean::ocean()
{
	tex=new textures();
	GenerateInitGrid();
}
ocean::~ocean()
{
	
}
void ocean::GenerateInitGrid()
{
    for (int x = 0; x < TAILLE; x++) {
        for (int z = 0; z < TAILLE; z++) {
            vertices[x][z][0] = (float)x; // X coordinate
            vertices[x][z][1] = 0.0f;    // Initial Y (height) will be 0
            vertices[x][z][2] = (float)z; // Z coordinate
            
            textureCoords[x][z][0] = (float)x / (float)TAILLE;  // U coordinate
            textureCoords[x][z][1] = (float)z / (float)TAILLE;  // V coordinate
        }
     }
}
void ocean::updateOceanVertices(float deltaTime)
{  // Loop through each vertex and update its Y value based on the FFT-generated height map
    for (int x = 0; x < TAILLE; x++) {
        for (int z = 0; z < TAILLE; z++) {
            // Update the Y coordinate using the height map generated by FFT
            vertices[x][z][1] = (float)(heightMap[x][z]);
        }
    }
}

void ocean::animateHeightMap(float time) {
	speed+=0.0005f;
    // Simple wave motion using a sine function to modulate the height map
    for (int x = 0; x < TAILLE; x++) {
        for (int z = 0; z < TAILLE; z++) {
            // Example: a sine wave that oscillates over time
            heightMap[x][z] = sinf((float)x * speed + time) * sinf((float)z * speed + time) * 5.0;
        }
    }
}

void ocean::update(float time)
{
	updateOceanVertices(time);
	animateHeightMap(time);
	
}

void ocean::loadTexture(const char* filename)
{
	texture=tex->loadBMP_custom(filename);
}

void ocean::draw()
{
	glEnable(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, texture);  // Bind the loaded texture
    
    glBegin(GL_QUADS);  // Render as quads
    for (int x = 0; x < TAILLE - 1; x++) {
        for (int z = 0; z < TAILLE - 1; z++) {
            // Render each quad with its updated vertices
            glTexCoord2f(textureCoords[x][z][0], textureCoords[x][z][1]);
            glVertex3f(vertices[x][z][0], vertices[x][z][1], vertices[x][z][2]);
            glTexCoord2f(textureCoords[x+1][z][0], textureCoords[x+1][z][1]);
            glVertex3f(vertices[x+1][z][0], vertices[x+1][z][1], vertices[x+1][z][2]);
            glTexCoord2f(textureCoords[x+1][z+1][0], textureCoords[x+1][z+1][1]);
            glVertex3f(vertices[x+1][z+1][0], vertices[x+1][z+1][1], vertices[x+1][z+1][2]);
            glTexCoord2f(textureCoords[x][z+1][0], textureCoords[x][z+1][1]);
            glVertex3f(vertices[x][z+1][0], vertices[x][z+1][1], vertices[x][z+1][2]);
        }
    }
    glEnd();
    glDisable(GL_TEXTURE_2D);
}
